{"remainingRequest":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\MBTI-Diary\\项目源码\\client\\src\\views\\campus\\content\\index.vue?vue&type=style&index=0&id=097b87a6&scoped=true&lang=css&","dependencies":[{"path":"E:\\MBTI-Diary\\项目源码\\client\\src\\views\\campus\\content\\index.vue","mtime":1718971753894},{"path":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1718722932016},{"path":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1718722926942},{"path":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1718722928962},{"path":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1718722932706},{"path":"E:\\MBTI-Diary\\项目源码\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1718722926770}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBpY3R1cmVfaXRlbSB7CiAgZGlzcGxheTogaW5saW5lOwogIHBhZGRpbmctbGVmdDogMC4yNXJlbTsKICBwYWRkaW5nLXRvcDogMC4yNXJlbTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsjBA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/campus/content","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-form\n      :model=\"queryParams\"\n      ref=\"queryForm\"\n      size=\"small\"\n      :inline=\"true\"\n      v-show=\"showSearch\"\n      label-width=\"68px\"\n    >\n      <el-form-item label=\"用户\" prop=\"userId\">\n        <el-input\n          v-model=\"queryParams.userId\"\n          placeholder=\"请输入用户id\"\n          clearable\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <el-form-item label=\"类别\" prop=\"categoryId\">\n        <treeselect\n          v-model=\"queryParams.categoryId\"\n          :options=\"categoryOptions\"\n          :normalizer=\"normalizer\"\n          :show-count=\"true\"\n          placeholder=\"选择分类\"\n          style=\"width: 130px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"内容\" prop=\"content\">\n        <el-input\n          v-model=\"queryParams.content\"\n          placeholder=\"请输入发表的内容\"\n          clearable\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"请选择状态\"\n          clearable\n        >\n          <el-option\n            v-for=\"dict in dict.type.campus_content_status\"\n            :key=\"dict.value\"\n            :label=\"dict.label\"\n            :value=\"dict.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"类型\" prop=\"type\">\n        <el-select\n          v-model=\"queryParams.type\"\n          placeholder=\"请选择类型\"\n          clearable\n        >\n          <el-option\n            v-for=\"dict in dict.type.campus_content_type\"\n            :key=\"dict.value\"\n            :label=\"dict.label\"\n            :value=\"dict.value\"\n          />\n        </el-select>\n      </el-form-item>\n\n      <el-form-item label=\"匿名\" prop=\"isAnonymous\">\n        <el-select\n          v-model=\"queryParams.isAnonymous\"\n          placeholder=\"请选择是否匿名\"\n          clearable\n        >\n          <el-option\n            v-for=\"dict in dict.type.campus_anonymous\"\n            :key=\"dict.value\"\n            :label=\"dict.label\"\n            :value=\"dict.value\"\n          />\n        </el-select>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button\n          type=\"primary\"\n          icon=\"el-icon-search\"\n          size=\"mini\"\n          @click=\"handleQuery\"\n          >搜索</el-button\n        >\n        <el-button icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\"\n          >重置</el-button\n        >\n      </el-form-item>\n    </el-form>\n\n    <el-row :gutter=\"10\" class=\"mb8\">\n      <el-col :span=\"1.5\">\n        <!-- v-hasPermi=\"['campus:content:add']\" -->\n        <el-button\n          type=\"primary\"\n          plain\n          icon=\"el-icon-plus\"\n          size=\"mini\"\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!-- v-hasPermi=\"['campus:content:edit']\" -->\n        <el-button\n          type=\"success\"\n          plain\n          icon=\"el-icon-edit\"\n          size=\"mini\"\n          :disabled=\"single\"\n          @click=\"handleUpdate\"\n          >修改</el-button\n        >\n      </el-col>\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"danger\"\n          plain\n          icon=\"el-icon-delete\"\n          size=\"mini\"\n          :disabled=\"multiple\"\n          @click=\"handleDelete\"\n          >删除</el-button\n        >\n      </el-col>\n      <right-toolbar\n        :showSearch.sync=\"showSearch\"\n        @queryTable=\"getList\"\n      ></right-toolbar>\n    </el-row>\n\n    <el-table\n      v-loading=\"loading\"\n      :data=\"contentList\"\n      @selection-change=\"handleSelectionChange\"\n    >\n      <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\n      <el-table-column label=\"用户昵称\" align=\"center\" prop=\"params.nickName\" />\n      <el-table-column label=\"类别\" align=\"center\" prop=\"params.categoryName\" />\n      <el-table-column\n        label=\"内容\"\n        align=\"center\"\n        prop=\"content\"\n        :show-overflow-tooltip=\"true\"\n      />\n      <el-table-column label=\"状态\" align=\"center\" prop=\"status\">\n        <template slot-scope=\"scope\">\n          <dict-tag\n            :options=\"dict.type.campus_content_status\"\n            :value=\"scope.row.status\"\n          />\n        </template>\n      </el-table-column>\n      <el-table-column label=\"类型\" align=\"center\" prop=\"type\">\n        <template slot-scope=\"scope\">\n          <dict-tag\n            :options=\"dict.type.campus_content_type\"\n            :value=\"scope.row.type\"\n          />\n        </template>\n      </el-table-column>\n      <el-table-column label=\"匿名\" align=\"center\" prop=\"isAnonymous\">\n        <template slot-scope=\"scope\">\n          <dict-tag\n            :options=\"dict.type.campus_anonymous\"\n            :value=\"scope.row.isAnonymous\"\n          />\n        </template>\n      </el-table-column>\n      <el-table-column label=\"创建时间\" align=\"center\" prop=\"createTime\" />\n\n      <el-table-column\n        label=\"操作\"\n        align=\"center\"\n        class-name=\"small-padding fixed-width\"\n      >\n        <template slot-scope=\"scope\">\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            @click=\"handleUpdate(scope.row)\"\n            >修改</el-button\n          >\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n            >删除</el-button\n          >\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-view\"\n            @click=\"handleView(scope.row)\"\n            >详细</el-button\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show=\"total > 0\"\n      :total=\"total\"\n      :page.sync=\"queryParams.pageNum\"\n      :limit.sync=\"queryParams.pageSize\"\n      @pagination=\"getList\"\n    />\n\n    <!-- 添加或修改墙内容对话框 -->\n    <el-dialog :title=\"title\" :visible.sync=\"open\" width=\"500px\" append-to-body>\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"分类\" prop=\"categoryId\">\n          <!-- <el-input v-model=\"form.categoryId\" placeholder=\"分类\" /> -->\n          <treeselect\n            v-model=\"form.categoryId\"\n            :options=\"categoryOptions\"\n            :disableBranchNodes=\"true\"\n            :normalizer=\"normalizer\"\n            :show-count=\"true\"\n            placeholder=\"选择分类\"\n          />\n        </el-form-item>\n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input\n            v-model=\"form.content\"\n            type=\"textarea\"\n            placeholder=\"请输入发表的内容\"\n          />\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-radio-group v-model=\"form.status\">\n            <el-radio\n              v-for=\"dict in dict.type.campus_content_status\"\n              :key=\"dict.value\"\n              :label=\"parseInt(dict.value)\"\n              >{{ dict.label }}</el-radio\n            >\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"类型\" prop=\"type\">\n          <el-select v-model=\"form.type\" placeholder=\"请选择类型\">\n            <el-option\n              v-for=\"dict in dict.type.campus_content_type\"\n              :key=\"dict.value\"\n              :label=\"dict.label\"\n              :value=\"parseInt(dict.value)\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"匿名\" prop=\"isAnonymous\">\n          <el-select v-model=\"form.isAnonymous\" placeholder=\"请选择匿名\">\n            <el-option\n              v-for=\"dict in dict.type.campus_anonymous\"\n              :key=\"dict.value\"\n              :label=\"dict.label\"\n              :value=\"parseInt(dict.value)\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 调度墙内容详细 -->\n    <el-dialog\n      title=\"帖子详细\"\n      :visible.sync=\"viewOpen\"\n      width=\"700px\"\n      append-to-body\n    >\n      <el-form ref=\"form\" :model=\"form\" label-width=\"100px\" size=\"mini\">\n        <el-row>\n          <el-col :span=\"8\">\n            <el-form-item label=\"头像：\"\n              ><image-preview :src=\"contentParams.avatar\"> </image-preview\n            ></el-form-item>\n          </el-col>\n          <el-col :span=\"8\">\n            <el-form-item label=\"用户昵称：\">{{\n              contentParams.nickName\n            }}</el-form-item>\n            <el-form-item label=\"用户账户：\">{{\n              contentParams.userName\n            }}</el-form-item>\n            <el-form-item label=\"分类：\">{{\n              contentParams.categoryName\n            }}</el-form-item>\n          </el-col>\n\n          <!-- <el-col :span=\"8\">\n            <el-form-item label=\"标签：\">\n              <li v-for=\"item in form.tags\">{{ item.tagName }}</li>\n            </el-form-item>\n          </el-col> -->\n          <el-col :span=\"24\">\n            <el-form-item label=\"内容：\" style=\"white-space: pre-wrap\">{{\n              form.content\n            }}</el-form-item>\n          </el-col>\n          <el-col :span=\"24\" v-if=\"form.type == 1\">\n            <el-form-item label=\"图片：\">\n              <div\n                class=\"picture_item\"\n                v-for=\"(item, key) in form.fileUrl\"\n                :key=\"key\"\n              >\n                <image-preview\n                  style=\"border-radius: 10px; width: 25%; aspect-ratio: 1/1\"\n                  :src=\"item\"\n                >\n                </image-preview>\n              </div>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"24\" v-if=\"form.type == 2\">\n            <el-form-item label=\"视频：\">\n              <div\n                class=\"picture_item\"\n                v-for=\"(item, key) in form.fileUrl\"\n                :key=\"key\"\n              >\n                <el-link\n                  :underline=\"false\"\n                  :href=\"handleUrl(item)\"\n                  target=\"_blank\"\n                  >点击跳转</el-link\n                >\n              </div>\n            </el-form-item>\n          </el-col>\n        </el-row>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"viewOpen = false\">关 闭</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  listContent,\n  getContent,\n  delContent,\n  addContent,\n  updateContent,\n} from \"@/api/campus/content\";\n\nimport { listSelectCategory, listCategory } from \"@/api/campus/category\";\nimport { isExternal } from \"@/utils/validate\";\n\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport Treeselect from \"@riophae/vue-treeselect\";\n\nexport default {\n  name: \"Content\",\n  dicts: [\"campus_content_status\", \"campus_content_type\", \"campus_anonymous\"],\n  components: { Treeselect },\n  data() {\n    return {\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      //分类树选项\n      categoryOptions: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 显示搜索条件\n      showSearch: true,\n      // 总条数\n      total: 0,\n      // 墙内容表格数据\n      contentList: [],\n      // 弹出层标题\n      title: \"\",\n      // 是否显示弹出层\n      open: false,\n      //是否显示详细的弹出层\n      viewOpen: false,\n      // 查询参数\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        userId: null,\n        categoryId: null,\n        content: null,\n        status: null,\n        type: null,\n        isAnonymous: null,\n      },\n      //其他参数\n      contentParams: {\n        nickName: \"\",\n        userName: \"\",\n        avatar: \"\",\n        categoryName: \"\",\n      },\n      // 表单参数\n      form: {},\n      // 表单校验\n      rules: {\n        categoryId: [\n          { required: true, message: \"分类不能为空\", trigger: \"blur\" },\n        ],\n        content: [{ required: true, message: \"内容不能为空\", trigger: \"blur\" }],\n      },\n    };\n  },\n  created() {\n    this.getList();\n    this.reset();\n    this.getTreeselect();\n  },\n  methods: {\n    /** 查询墙内容列表 */\n    getList() {\n      this.loading = true;\n      listContent(this.queryParams).then((response) => {\n        this.contentList = response.rows;\n        this.total = response.total;\n        this.loading = false;\n      });\n    },\n    /** 转换菜单数据结构 */\n    normalizer(node) {\n      if (node.children && !node.children.length) {\n        delete node.children;\n      }\n      return {\n        id: node.categoryId,\n        label: node.categoryName,\n        children: node.children,\n      };\n    },\n    /** 查询下拉树结构 */\n    getTreeselect() {\n      listSelectCategory().then((response) => {\n        this.categoryOptions = this.handleTree(response.data, \"categoryId\");\n      });\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false;\n      this.reset();\n    },\n    // 表单重置\n    reset() {\n      this.form = {\n        contentId: null,\n        userId: null,\n        categoryId: null,\n        content: null,\n        status: 0,\n        type: null,\n        fileNumber: null,\n        isAnonymous: null,\n        delFlag: null,\n        createTime: null,\n        createUser: null,\n        updateTime: null,\n        updateUser: null,\n      };\n      this.resetForm(\"form\");\n    },\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.pageNum = 1;\n      this.getList();\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.resetForm(\"queryForm\");\n      this.handleQuery();\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map((item) => item.contentId);\n      this.single = selection.length !== 1;\n      this.multiple = !selection.length;\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset();\n      this.open = true;\n      this.title = \"添加墙内容\";\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset();\n      const contentId = row.contentId || this.ids;\n      getContent(contentId).then((response) => {\n        this.form = response.data;\n        this.open = true;\n        this.title = \"修改墙内容\";\n      });\n    },\n    /** 提交按钮 */\n    submitForm() {\n      this.$refs[\"form\"].validate((valid) => {\n        if (valid) {\n          if (this.form.contentId != null) {\n            updateContent(this.form).then((response) => {\n              this.$modal.msgSuccess(\"修改成功\");\n              this.open = false;\n              this.getList();\n            });\n          } else {\n            addContent(this.form).then((response) => {\n              this.$modal.msgSuccess(\"新增成功\");\n              this.open = false;\n              this.getList();\n            });\n          }\n        }\n      });\n    },\n    /** 详细按钮操作 */\n    handleView(row) {\n      this.viewOpen = true;\n      this.form = row;\n      this.contentParams = row.params;\n    },\n    handleUrl(url) {\n      if (!url) {\n        return;\n      }\n      let real_src = url.split(\",\")[0];\n      if (isExternal(real_src)) {\n        return real_src;\n      }\n      return process.env.VUE_APP_BASE_API + real_src;\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const contentIds = row.contentId || this.ids;\n      this.$modal\n        .confirm('是否确认删除墙内容编号为\"' + contentIds + '\"的数据项？')\n        .then(function () {\n          return delContent(contentIds);\n        })\n        .then(() => {\n          this.getList();\n          this.$modal.msgSuccess(\"删除成功\");\n        })\n        .catch(() => {});\n    },\n    /** 导出按钮操作 */\n    handleExport() {\n      this.download(\n        \"system/content/export\",\n        {\n          ...this.queryParams,\n        },\n        `content_${new Date().getTime()}.xlsx`\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n.picture_item {\n  display: inline;\n  padding-left: 0.25rem;\n  padding-top: 0.25rem;\n}\n</style>\n"]}]}